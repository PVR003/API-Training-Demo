{
	"info": {
		"_postman_id": "8d0d1d1d-bb49-4ff0-b4f2-54ba8cdb6f37",
		"name": "API Final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35071012",
		"_collection_link": "https://www.postman.com/ct-auto/workspace/comcasttraining/collection/35071012-8d0d1d1d-bb49-4ff0-b4f2-54ba8cdb6f37?action=share&source=collection_link&creator=35071012"
	},
	"item": [
		{
			"name": "E2E testing",
			"item": [
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code received from server is 201 Created\", function () {\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"// pm.test(\"Verify if response body is received from server\", function () {\r",
									"//     pm.response.to.have.body();\r",
									"// });\r",
									"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"// });\r",
									"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
									"// });\r",
									"// pm.test(\"Verify if gender as male or female\", function () {\r",
									"// \tpm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"// });\r",
									"// pm.test(\"verifify if status as active or inactive\", function () {\r",
									"// \tpm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"// });\r",
									"\r",
									"///E2E TEST///\r",
									"\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedID = jsonBody.id;\r",
									"pm.globals.set(\"globalid\", extractedID);\r",
									"\r",
									"var extractedName = jsonBody.name;\r",
									"pm.globals.set(\"gname\", extractedName);\r",
									"\r",
									"var extractedEmail = jsonBody.email;\r",
									"pm.globals.set(\"gemail\", extractedEmail);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"gendpoint\", \"v2/users\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							},
							{
								"key": "User-Agent",
								"value": "{{$randomUserAgent}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomUserName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{envprotocol}}://{{envurl}}/public/{{gendpoint}}",
							"protocol": "{{envprotocol}}",
							"host": [
								"{{envurl}}"
							],
							"path": [
								"public",
								"{{gendpoint}}"
							]
						},
						"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
					},
					"response": []
				},
				{
					"name": "Verify USERS created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"// pm.test(\"Verify if response body is received from server\", function () {\r",
									"//     pm.response.to.have.body();\r",
									"// });\r",
									"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"// });\r",
									"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
									"// });\r",
									"\r",
									"///E2E TEST///\r",
									"pm.test(\"Verify if user is created with name: \"+pm.globals.get(\"gname\"), function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData[0].name).to.eql(pm.globals.get(\"gname\"))\r",
									"\t});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"//     pm.response.to.have.status(\"OK\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"// pm.test(\"Verify if response body is received from server\", function () {\r",
									"//     pm.response.to.have.body();\r",
									"// });\r",
									"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"// });\r",
									"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
									"// });\r",
									"\r",
									"// // pm.test(\"Verify test name\", function () {\r",
									"// // \tvar jsonData = pm.response.json();\r",
									"// // \tpm.expect(jsonData.name).to.eql(\"Raja\");\r",
									"// // });\r",
									"\r",
									"// // pm.test(\"Verify the test id\", function () {\r",
									"// // \tvar jsonData = pm.response.json();\r",
									"// // \tpm.expect(jsonData.id).to.eql(6921540);\r",
									"// // });\r",
									"\r",
									"// // pm.test(\"Your test email\", function () {\r",
									"// // \tvar jsonData = pm.response.json();\r",
									"// // \tpm.expect(jsonData.email).to.eql(\"Raja@15ce.com\");\r",
									"// // });\r",
									"\r",
									"// // console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
									"// // console.log(\"Date type of name \" + typeof(pm.response.json().name))\r",
									"// // console.log(\"The data type for status field is \"+ typeof(pm.response.json().status));\r",
									"\r",
									"// // console.log(\"The response size received from server is \");\r",
									"// // console.log(pm.response.size());\r",
									"\r",
									"// // console.log(\"The response body received from server in JSON format is \");\r",
									"// // console.log(pm.response.json());        // print in json format\r",
									"\r",
									"// // console.log(\"The response body received from server in TEXT format is \");\r",
									"// // console.log(pm.response.text());        // print in text format\r",
									"\r",
									"// // console.log(\"The response headers received from server are \");\r",
									"// // console.log(pm.response.headers);\r",
									"\r",
									"\r",
									"// // console.log(\"The HTTP method used in this request is > \"+pm.request.method);\r",
									"// // console.log(\"The API URL used in this request is > \"+pm.request.url);\r",
									"// // console.log(\"The payload used in this API request is >\"+pm.request.body);\r",
									"// // console.log(\"The request size is >\")\r",
									"// // console.log(pm.request.size());\r",
									"// // console.log(\"The request headers of this API are >\");\r",
									"// // console.log(pm.request.headers);\r",
									"// // console.log(\"The API name is > \"+pm.info.requestName);\r",
									"\r",
									"///E2E TEST///\r",
									"\r",
									"var jsonBody = pm.response.json();\r",
									"var extractedName = jsonBody.name;\r",
									"pm.globals.set(\"globalUpdatedName\", extractedName)\r",
									"\r",
									"pm.test(\"Your update name is > \" + extractedName, function () {\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomUserName}} {{gname}}\",\r\n    \"email\": \"{{gemail}}\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalid}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalid}}"
							]
						},
						"description": "**This is a REST API that uses HTTP method=PATCH and is used to update/modify existing user details in the server/database**\n\n**Expected Result:  \n**\n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status  \n    **"
					},
					"response": []
				},
				{
					"name": "verify USER updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"//     pm.response.to.have.status(\"OK\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"// pm.test(\"Verify if response body is received from server\", function () {\r",
									"//     pm.response.to.have.body();\r",
									"// });\r",
									"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"// });\r",
									"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
									"// });\r",
									"\r",
									"\r",
									"///E2E TEST///\r",
									"\r",
									"pm.test(\"Verify if user is updated with name: \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"  var jsonData = pm.response.json();\r",
									"  pm.expect(jsonData[0].name).to.eql(pm.globals.get(\"globalUpdatedName\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						},
						"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code received from server is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"// pm.test(\"Verify if response body is received from server\", function () {\r",
									"//     pm.response.to.not.have.body();\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalid}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalid}}"
							]
						},
						"description": "**This is a REST API that uses HTTP method=DELETE and is used to delete existing user details in the server/database  \n  \n**\n\nStartFragment\n\n**Expected Result:  \n  \n**\n\n- **Verify if response code received from server is 204 No Content**\n    \n- **Verify if response time from server < 5 seconds**\n    \n\n**Verify if response body is not received from server**"
					},
					"response": []
				},
				{
					"name": "verify USER is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"//     pm.response.to.have.status(\"OK\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
									"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"// });\r",
									"// pm.test(\"Verify if response body is received from server\", function () {\r",
									"//     pm.response.to.have.body();\r",
									"// });\r",
									"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
									"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"// });\r",
									"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
									"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
									"// });\r",
									"\r",
									"\r",
									"///E2E TEST///\r",
									"\r",
									"\r",
									"pm.test(\"Verify if user is deleted with name: \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.not.eql(pm.globals.get(\"globalUpdatedName\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
					},
					"response": []
				}
			]
		},
		{
			"name": "negative Test cases",
			"item": [
				{
					"name": "Unsupported HTTP methods",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
							},
							"response": []
						},
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
							},
							"response": []
						},
						{
							"name": "LIST USERS API Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 201 Created\", function () {\r",
											"//     pm.response.to.have.status(201);\r",
											"//     pm.response.to.have.status(\"Created\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"// pm.test(\"Verify if gender as male or female\", function () {\r",
											"// \tpm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
											"// });\r",
											"// pm.test(\"verifify if status as active or inactive\", function () {\r",
											"// \tpm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
											"// });\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PVR\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"pvr3@15ce.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify test name\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.name).to.eql(\"Raja\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify the test id\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.id).to.eql(6921540);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Your test email\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.email).to.eql(\"Raja@15ce.com\");\r",
											"// });\r",
											"\r",
											"// console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
											"// console.log(\"Date type of name \" + typeof(pm.response.json().name))\r",
											"// console.log(\"The data type for status field is \"+ typeof(pm.response.json().status));\r",
											"\r",
											"// console.log(\"The response size received from server is \");\r",
											"// console.log(pm.response.size());\r",
											"\r",
											"// console.log(\"The response body received from server in JSON format is \");\r",
											"// console.log(pm.response.json());        // print in json format\r",
											"\r",
											"// console.log(\"The response body received from server in TEXT format is \");\r",
											"// console.log(pm.response.text());        // print in text format\r",
											"\r",
											"// console.log(\"The response headers received from server are \");\r",
											"// console.log(pm.response.headers);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// console.log(\"The HTTP method used in this request is > \"+pm.request.method);\r",
											"// console.log(\"The API URL used in this request is > \"+pm.request.url);\r",
											"// console.log(\"The payload used in this API request is >\"+pm.request.body);\r",
											"// console.log(\"The request size is >\")\r",
											"// console.log(pm.request.size());\r",
											"// console.log(\"The request headers of this API are >\");\r",
											"// console.log(pm.request.headers);\r",
											"// console.log(\"The API name is > \"+pm.info.requestName);\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Raja\",\r\n    \"email\": \"Raja@15ce.com\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/6921540",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"6921540"
									]
								},
								"description": "**This is a REST API that uses HTTP method=PATCH and is used to update/modify existing user details in the server/database**\n\n**Expected Result:  \n**\n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status  \n    **"
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify test name\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.name).to.eql(\"Raja\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify the test id\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.id).to.eql(6921540);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Your test email\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.email).to.eql(\"Raja@15ce.com\");\r",
											"// });\r",
											"\r",
											"// console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
											"// console.log(\"Date type of name \" + typeof(pm.response.json().name))\r",
											"// console.log(\"The data type for status field is \"+ typeof(pm.response.json().status));\r",
											"\r",
											"// console.log(\"The response size received from server is \");\r",
											"// console.log(pm.response.size());\r",
											"\r",
											"// console.log(\"The response body received from server in JSON format is \");\r",
											"// console.log(pm.response.json());        // print in json format\r",
											"\r",
											"// console.log(\"The response body received from server in TEXT format is \");\r",
											"// console.log(pm.response.text());        // print in text format\r",
											"\r",
											"// console.log(\"The response headers received from server are \");\r",
											"// console.log(pm.response.headers);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// console.log(\"The HTTP method used in this request is > \"+pm.request.method);\r",
											"// console.log(\"The API URL used in this request is > \"+pm.request.url);\r",
											"// console.log(\"The payload used in this API request is >\"+pm.request.body);\r",
											"// console.log(\"The request size is >\")\r",
											"// console.log(pm.request.size());\r",
											"// console.log(\"The request headers of this API are >\");\r",
											"// console.log(pm.request.headers);\r",
											"// console.log(\"The API name is > \"+pm.info.requestName);\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx client side error\", function () {\r",
											"    pm.response.to.be.clientError;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Raja\",\r\n    \"email\": \"Raja@15ce.com\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/6921540",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"6921540"
									]
								},
								"description": "**This is a REST API that uses HTTP method=PATCH and is used to update/modify existing user details in the server/database**\n\n**Expected Result:  \n**\n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status  \n    **"
							},
							"response": []
						}
					]
				},
				{
					"name": "Broken-end-point",
					"item": [
						{
							"name": "LIST USERS API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/private/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"private",
										"v2",
										"users"
									]
								},
								"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
							},
							"response": []
						},
						{
							"name": "CREATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 201 Created\", function () {\r",
											"//     pm.response.to.have.status(201);\r",
											"//     pm.response.to.have.status(\"Created\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"// pm.test(\"Verify if gender as male or female\", function () {\r",
											"// \tpm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
											"// });\r",
											"// pm.test(\"verifify if status as active or inactive\", function () {\r",
											"// \tpm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
											"// });\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PVR\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"pvr3@15ce.com\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/private/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"private",
										"v2",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "UPDATE USER API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify test name\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.name).to.eql(\"Raja\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify the test id\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.id).to.eql(6921540);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Your test email\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.email).to.eql(\"Raja@15ce.com\");\r",
											"// });\r",
											"\r",
											"// console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
											"// console.log(\"Date type of name \" + typeof(pm.response.json().name))\r",
											"// console.log(\"The data type for status field is \"+ typeof(pm.response.json().status));\r",
											"\r",
											"// console.log(\"The response size received from server is \");\r",
											"// console.log(pm.response.size());\r",
											"\r",
											"// console.log(\"The response body received from server in JSON format is \");\r",
											"// console.log(pm.response.json());        // print in json format\r",
											"\r",
											"// console.log(\"The response body received from server in TEXT format is \");\r",
											"// console.log(pm.response.text());        // print in text format\r",
											"\r",
											"// console.log(\"The response headers received from server are \");\r",
											"// console.log(pm.response.headers);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// console.log(\"The HTTP method used in this request is > \"+pm.request.method);\r",
											"// console.log(\"The API URL used in this request is > \"+pm.request.url);\r",
											"// console.log(\"The payload used in this API request is >\"+pm.request.body);\r",
											"// console.log(\"The request size is >\")\r",
											"// console.log(pm.request.size());\r",
											"// console.log(\"The request headers of this API are >\");\r",
											"// console.log(pm.request.headers);\r",
											"// console.log(\"The API name is > \"+pm.info.requestName);\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Raja\",\r\n    \"email\": \"Raja@15ce.com\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/private/v2/users/6921540",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"private",
										"v2",
										"users",
										"6921540"
									]
								},
								"description": "**This is a REST API that uses HTTP method=PATCH and is used to update/modify existing user details in the server/database**\n\n**Expected Result:  \n**\n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status  \n    **"
							},
							"response": []
						},
						{
							"name": "LIST USERS API Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								},
								"description": "**This is a REST API that uses HTTP method=GET and is used to retrieve/read/fetch all the existing users details from the server/database**\n\n1. **Expected Result:**\n    \n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**"
							},
							"response": []
						},
						{
							"name": "CREATE USER API Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 201 Created\", function () {\r",
											"//     pm.response.to.have.status(201);\r",
											"//     pm.response.to.have.status(\"Created\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"// pm.test(\"Verify if gender as male or female\", function () {\r",
											"// \tpm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
											"// });\r",
											"// pm.test(\"verifify if status as active or inactive\", function () {\r",
											"// \tpm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
											"// });\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "UPDATE USER API Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"//     pm.response.to.have.status(\"OK\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"// });\r",
											"// pm.test(\"Verify if response body is received from server\", function () {\r",
											"//     pm.response.to.have.body();\r",
											"// });\r",
											"// pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"//     pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"// });\r",
											"// pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"//     pm.expect(pm.response.text()).to.include(\"id\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"name\");\r",
											"//     pm.expect(pm.response.text()).to.include(\"email\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify test name\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.name).to.eql(\"Raja\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Verify the test id\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.id).to.eql(6921540);\r",
											"// });\r",
											"\r",
											"// pm.test(\"Your test email\", function () {\r",
											"// \tvar jsonData = pm.response.json();\r",
											"// \tpm.expect(jsonData.email).to.eql(\"Raja@15ce.com\");\r",
											"// });\r",
											"\r",
											"// console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
											"// console.log(\"Date type of name \" + typeof(pm.response.json().name))\r",
											"// console.log(\"The data type for status field is \"+ typeof(pm.response.json().status));\r",
											"\r",
											"// console.log(\"The response size received from server is \");\r",
											"// console.log(pm.response.size());\r",
											"\r",
											"// console.log(\"The response body received from server in JSON format is \");\r",
											"// console.log(pm.response.json());        // print in json format\r",
											"\r",
											"// console.log(\"The response body received from server in TEXT format is \");\r",
											"// console.log(pm.response.text());        // print in text format\r",
											"\r",
											"// console.log(\"The response headers received from server are \");\r",
											"// console.log(pm.response.headers);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// console.log(\"The HTTP method used in this request is > \"+pm.request.method);\r",
											"// console.log(\"The API URL used in this request is > \"+pm.request.url);\r",
											"// console.log(\"The payload used in this API request is >\"+pm.request.body);\r",
											"// console.log(\"The request size is >\")\r",
											"// console.log(pm.request.size());\r",
											"// console.log(\"The request headers of this API are >\");\r",
											"// console.log(pm.request.headers);\r",
											"// console.log(\"The API name is > \"+pm.info.requestName);\r",
											"\r",
											"\r",
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer  {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v1/users/6930632",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v1",
										"users",
										"6930632"
									]
								},
								"description": "**This is a REST API that uses HTTP method=PATCH and is used to update/modify existing user details in the server/database**\n\n**Expected Result:  \n**\n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status  \n    **"
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid Payload",
					"item": [
						{
							"name": "invalid status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PVR\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"pvr3@15ce.com\",\r\n    \"status\": \"nill\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "invalid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PVR  1223 afafe4  &%^%4 agjbal wewqrwr \",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "missing payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PVR  1223 afafe4  &%^%4 agjbal wewqrwr \",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    // \"status\": \"active\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "extra payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PVR  1223 afafe4  &%^%4 agjbal wewqrwr \",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\",\r\n    \"mobile\": \"99988776654\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "payload empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code is 4xx or 5xx error\", function () {\r",
											"    pm.response.to.be.error;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"PVR  1223 afafe4  &%^%4 agjbal wewqrwr \",\r\n    \"gender\": \"\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\",\r\n    \"mobile\": \"99988776654\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								},
								"description": "\\*_This is a REST API that uses HTTP method=POST and is used to create new user in the server/database__\\*_\n\nExp Result\n\n- **Verify if response code received from server is 201 Created**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status**\n    \n- Verify if gender as male or femal\n    \n- verifify if status as active or inactive"
							},
							"response": []
						},
						{
							"name": "UPDATE USER API Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify if response code received from server is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if response time from server < 5 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"pm.test(\"Verify if response body is received from server\", function () {\r",
											"    pm.response.to.have.body();\r",
											"});\r",
											"pm.test(\"Verify if response body received from server is in JSON format\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"id\");\r",
											"    pm.expect(pm.response.text()).to.include(\"name\");\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify test name\", function () {\r",
											"\tvar jsonData = pm.response.json();\r",
											"\tpm.expect(jsonData.name).to.eql(\"Raja\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verify the test id\", function () {\r",
											"\tvar jsonData = pm.response.json();\r",
											"\tpm.expect(jsonData.id).to.eql(6921540);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test email\", function () {\r",
											"\tvar jsonData = pm.response.json();\r",
											"\tpm.expect(jsonData.email).to.eql(\"Raja@15ce.com\");\r",
											"});\r",
											"\r",
											"console.log(\"The data type for id field is \"+typeof(pm.response.json().id));\r",
											"console.log(\"Date type of name \" + typeof(pm.response.json().name))\r",
											"console.log(\"The data type for status field is \"+ typeof(pm.response.json().status));\r",
											"\r",
											"console.log(\"The response size received from server is \");\r",
											"console.log(pm.response.size());\r",
											"\r",
											"console.log(\"The response body received from server in JSON format is \");\r",
											"console.log(pm.response.json());        // print in json format\r",
											"\r",
											"console.log(\"The response body received from server in TEXT format is \");\r",
											"console.log(pm.response.text());        // print in text format\r",
											"\r",
											"console.log(\"The response headers received from server are \");\r",
											"console.log(pm.response.headers);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"console.log(\"The HTTP method used in this request is > \"+pm.request.method);\r",
											"console.log(\"The API URL used in this request is > \"+pm.request.url);\r",
											"console.log(\"The payload used in this API request is >\"+pm.request.body);\r",
											"console.log(\"The request size is >\")\r",
											"console.log(pm.request.size());\r",
											"console.log(\"The request headers of this API are >\");\r",
											"console.log(pm.request.headers);\r",
											"console.log(\"The API name is > \"+pm.info.requestName);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{gAccessToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Raja\",\r\n    \"email\": \"Raja@15ce.com\",\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/6921540",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"6921540"
									]
								},
								"description": "**This is a REST API that uses HTTP method=PATCH and is used to update/modify existing user details in the server/database**\n\n**Expected Result:  \n**\n\n- **Verify if response code received from server is 200 OK**\n    \n- **Verify if response time from server < 5 seconds**\n    \n- **Verify if response body is received from server**\n    \n- **Verify if response body received from server is in JSON format**\n    \n- **Verify if response body contains fields such as id, name, email, gender, status  \n    **"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "gAccessToken",
			"value": "d869838242cf3e536fa605a2a2cb5ff89386a4a46d53bbfb1bc621e5a939e4ff",
			"type": "string"
		}
	]
}